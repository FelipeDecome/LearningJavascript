{"version":3,"sources":["../../app-es6/services/NegociacoesService.js"],"names":["NegociacoesService","_http","HttpService","Promise","all","obterNegociacoesSemana","obterNegociacoesSemanaAnterior","obterNegociacoesSemanaRetrasada","then","periodos","reduce","dados","periodo","concat","catch","e","console","log","Error","get","negociacoes","map","obj","Negociacao","Date","data","quantidade","valor","erro","negociacao","ConnectionFactory","getConnection","connection","NegociacaoDao","dao","adiciona","index","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"mappings":"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","file":"NegociacoesService.js","sourcesContent":["class NegociacoesService {\n  constructor() {\n    this._http = new HttpService();\n  }\n\n  obterNegociacoes() {\n    return Promise.all([\n      this.obterNegociacoesSemana(),\n      this.obterNegociacoesSemanaAnterior(),\n      this.obterNegociacoesSemanaRetrasada(),\n    ])\n      .then((periodos) =>\n        periodos.reduce((dados, periodo) => dados.concat(periodo), [])\n      )\n      .catch((e) => {\n        console.log(e);\n        throw new Error(\"Não foi possível importar as negociações\");\n      });\n  }\n\n  obterNegociacoesSemana() {\n    return this._http\n      .get(\"negociacoes/semana\")\n      .then((negociacoes) => {\n        console.log(negociacoes);\n        return negociacoes.map(\n          (obj) => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)\n        );\n      })\n      .catch((erro) => {\n        console.log(erro);\n        throw new Error(\"Não foi possível importar as negociações da semana.\");\n      });\n  }\n\n  obterNegociacoesSemanaAnterior() {\n    return this._http\n      .get(\"negociacoes/anterior\")\n      .then((negociacoes) => {\n        console.log(negociacoes);\n        return negociacoes.map(\n          (obj) => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)\n        );\n      })\n      .catch((erro) => {\n        console.log(erro);\n        throw new Error(\n          \"Não foi possível importar as negociações da semana anterior.\"\n        );\n      });\n  }\n\n  obterNegociacoesSemanaRetrasada() {\n    return this._http\n      .get(\"negociacoes/retrasada\")\n      .then((negociacoes) => {\n        console.log(negociacoes);\n        return negociacoes.map(\n          (obj) => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)\n        );\n      })\n      .catch((erro) => {\n        console.log(erro);\n        throw new Error(\n          \"Não foi possível importar as negociações da semana retrasada.\"\n        );\n      });\n  }\n\n  cadastrar(negociacao) {\n    return ConnectionFactory.getConnection()\n      .then((connection) => new NegociacaoDao(connection))\n      .then((dao) => dao.adiciona(negociacao))\n      .then(() => \"Negociação adicionada com sucesso.\")\n      .catch((e) => {\n        throw new Error(\"Não foi possível adicionar a negociação\");\n      });\n  }\n\n  lista() {\n    return ConnectionFactory.getConnection()\n      .then((connection) => new NegociacaoDao(connection))\n      .then((dao) => dao.index())\n      .catch((e) => {\n        console.log(e);\n        throw new Error(\"Não foi possível listar as negociações\");\n      });\n  }\n\n  apaga() {\n    return ConnectionFactory.getConnection()\n      .then((connection) => new NegociacaoDao(connection))\n      .then((dao) => dao.apagaTodos())\n      .catch((e) => {\n        throw new Error(e);\n      });\n  }\n\n  importa(listaAtual) {\n    return this.obterNegociacoes().then((negociacoes) =>\n      negociacoes.filter(\n        (negociacao) =>\n          !listaAtual.negociacoes.some((negociacaoExistente) =>\n            negociacao.isEquals(negociacaoExistente)\n          )\n      )\n    );\n  }\n}\n"]}