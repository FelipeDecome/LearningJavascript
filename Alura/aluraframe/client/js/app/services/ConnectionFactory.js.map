{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AACbC,W,GAAQ,I;;AAESC,uB;AACnB,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;AACnCV,kCAAkBW,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACD,eAFD;;AAIAR,0BAAYS,SAAZ,GAAwB,UAACJ,CAAD,EAAO;AAC7B,oBAAI,CAACZ,UAAL,EAAiB;AACfA,+BAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAM;AACvB,0BAAM,IAAIE,KAAJ,CACJ,0EADI,CAAN;AAGD,mBAJD;AAKD;;AAEDE,wBAAQL,UAAR;AACD,eAZD;;AAcAO,0BAAYW,OAAZ,GAAsB,UAACN,CAAD,EAAO;AAC3BO,wBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAf,uBAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAID,aAzBM,CAAP;AA0BD;;;wCAEoBtB,U,EAAY;AAC/BH,mBAAO0B,OAAP,CAAe,UAACC,KAAD,EAAW;AACxB,kBAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ;AACE;AACAxB,2BAAW2B,iBAAX,CAA6BH,KAA7B;;AAEFxB,yBAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoC;AAClCK,+BAAe;AADmB,eAApC;AAGD,aARD;AASD;;;4CAEwB;AACvB,gBAAI7B,UAAJ,EAAgB;AACdC;AACAA,sBAAQ,IAAR;AACD;AACF;;;;;;yBAnDkBC,iB","file":"ConnectionFactory.js","sourcesContent":["const stores = [\"negociacoes\"];\nconst version = 3;\nconst dbName = \"aluraframe\";\n\nlet connection = null;\nlet close = null;\n\nexport default class ConnectionFactory {\n  constructor() {\n    throw new Error(\"A classe ConnectionFactory não pode ser instanciada\");\n  }\n\n  static getConnection() {\n    return new Promise((resolve, reject) => {\n      let openRequest = window.indexedDB.open(dbName, version);\n\n      openRequest.onupgradeneeded = (e) => {\n        ConnectionFactory._createStores(e.target.result);\n      };\n\n      openRequest.onsuccess = (e) => {\n        if (!connection) {\n          connection = e.target.result;\n          close = connection.close.bind(connection);\n          connection.close = () => {\n            throw new Error(\n              \"A conexão não deve ser fechada diretamente, use o método closeConnection\"\n            );\n          };\n        }\n\n        resolve(connection);\n      };\n\n      openRequest.onerror = (e) => {\n        console.log(e.target.error);\n        reject(e.target.error.name);\n      };\n    });\n  }\n\n  static _createStores(connection) {\n    stores.forEach((store) => {\n      if (connection.objectStoreNames.contains(store))\n        // Implementar código para salvar os dados antes de deletar\n        connection.deleteObjectStore(store);\n\n      connection.createObjectStore(store, {\n        autoIncrement: true,\n      });\n    });\n  }\n\n  static closeConnection() {\n    if (connection) {\n      close();\n      close = null;\n    }\n  }\n}\n"]}