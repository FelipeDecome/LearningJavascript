{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAY;;AAEnC,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AAEE,iCAAc;AAAA;;AAEZ,YAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;AALH;AAAA;AAAA,sCAOyB;;AAErB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;;AAEjCd,8BAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,WAHD;;AAKAR,sBAAYS,SAAZ,GAAwB,aAAK;;AAE3B,gBAAI,CAACf,UAAL,EAAiB;;AAEfA,2BAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,sBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,yBAAWC,KAAX,GAAmB,YAAM;;AAEvB,sBAAM,IAAIC,KAAJ,CAAU,0EAAV,CAAN;AACD,eAHD;AAID;;AAEDE,oBAAQJ,UAAR;AACD,WAbD;;AAeAM,sBAAYW,OAAZ,GAAsB,aAAK;;AAEzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAJD;AAKD,SA7BM,CAAP;AA8BD;AAvCH;AAAA;AAAA,oCAyCuBrB,UAzCvB,EAyCmC;;AAE/BH,eAAOyB,OAAP,CAAe,iBAAS;;AAEtB,cAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ;AACE;AACAzB,uBAAW0B,iBAAX,CAA6BD,KAA7B;;AAEFzB,qBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC;AAClCG,2BAAe;AADmB,WAApC;AAGD,SATD;AAUD;AArDH;AAAA;AAAA,wCAuD2B;;AAEvB,YAAI5B,UAAJ,EAAgB;;AAEdC;AACAA,kBAAQ,IAAR;AACD;AACF;AA9DH;;AAAA;AAAA;AAgED,CAzEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function () {\n\n  const stores = ['negociacoes']\n  const version = 3\n  const dbName = 'aluraframe'\n\n  var connection = null\n  var close = null\n\n  return class ConnectionFactory {\n\n    constructor() {\n\n      throw new Error('A classe ConnectionFactory não pode ser instanciada')\n    }\n\n    static getConnection() {\n\n      return new Promise((resolve, reject) => {\n\n        let openRequest = window.indexedDB.open(dbName, version)\n\n        openRequest.onupgradeneeded = e => {\n\n          ConnectionFactory._createStores(e.target.result)\n        }\n\n        openRequest.onsuccess = e => {\n\n          if (!connection) {\n\n            connection = e.target.result\n            close = connection.close.bind(connection)\n            connection.close = () => {\n\n              throw new Error('A conexão não deve ser fechada diretamente, use o método closeConnection')\n            }\n          }\n\n          resolve(connection)\n        }\n\n        openRequest.onerror = e => {\n\n          console.log(e.target.error)\n          reject(e.target.error.name)\n        }\n      })\n    }\n\n    static _createStores(connection) {\n\n      stores.forEach(store => {\n\n        if (connection.objectStoreNames.contains(store))\n          // Implementar código para salvar os dados antes de deletar\n          connection.deleteObjectStore(store)\n\n        connection.createObjectStore(store, {\n          autoIncrement: true\n        })\n      })\n    }\n\n    static closeConnection() {\n\n      if (connection) {\n\n        close()\n        close = null\n      }\n    }\n  }\n})()\n"]}